<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/data/mongo
    http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<bean id="applicationContextProvider" class="com.home.ApplicationContextProvider">
	</bean>

	<mvc:annotation-driven />

	<context:annotation-config />

	<context:component-scan base-package="com.home.controller" />
	<context:component-scan base-package="com.home.service" />
	<context:component-scan base-package="com.home.events" />

	<mongo:db-factory id="mongoDbFactory" dbname="${mongo.databasename}"
		host="${mongo.host}" port="${mongo.port}" username="${mongo.username}"
		password="${mongo.password}" />

	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg name="mongoDbFactory" ref="mongoDbFactory" />
	</bean>

	<import resource="workflow.xml" />

	<tx:annotation-driven />

	<bean id="appSettings" class="com.home.AppSettings">
		<constructor-arg index="0" value="${dateFormat}" />
	</bean>
	
	<bean id="openExchangeConfig" class="com.home.model.config.OpenExchangeConfig">
		<constructor-arg index="0" value="${openExchangeBaseUrl}" />
		<constructor-arg index="1" value="${openExchangeTypeListEndpoint}" />
		<constructor-arg index="2" value="${openExchangeLatestRatesEndpoint}" />
		<constructor-arg index="3" value="${openExchangeApiKey}" />
	</bean>
	
	<!-- REST Template for REST calls -->
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<property name="messageConverters">
			<list>
				<ref bean="jsonConverter" />
			</list>
		</property>
	</bean>

	<bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes" value="application/json" />
	</bean>

	<!-- Emailer -->
	<bean id="mailService" class="com.home.email.simple.SimpleMailService">
		<property name="host" value="${mailhost}" />
		<property name="port" value="${mailport}" />
		<property name="username" value="${mailusername}" />
		<property name="password" value="${mailpassword}" />
	</bean>

	<!-- Message Source from .properties files -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>ValidationMessages</value>
				<value>ThankYouEmail</value>
			</list>
		</property>
	</bean>

	<!-- Dozer Mapping -->
	<bean id="mapper" class="org.dozer.DozerBeanMapper">
		<property name="mappingFiles">
			<list>
			</list>
		</property>
	</bean>

	<bean id="generalHardCodedValues"
		class="com.home.model.hardcodedvalues.simple.SimpleGeneralHardCodedValues">
		<constructor-arg index="0" value="${emailSender}" />
	</bean>

	<!-- Needed for EntityManagerFactory -->
	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<!-- Datasources -->
	<bean id="dataSourceCloudbees" destroy-method="close"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.cloudbees.driverClassName}" />
		<property name="url" value="${jdbc.cloudbees.url}" />
		<property name="username" value="${jdbc.cloudbees.user}" />
		<property name="password" value="${jdbc.cloudbees.password}" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testOnBorrow" value="true" />
	</bean>

	<!-- JPA Entity Manager for Cloudbees Database -->
	<bean id="entityManagerFactoryCloudbees"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="packagesToScan">
			<list>
				<value>com.home.model.cloud</value>
			</list>
		</property>
		<property name="dataSource" ref="dataSourceCloudbees" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" />
				<property name="showSql" value="false" />
				<property name="generateDdl" value="true" />
			</bean>
		</property>
		<property name="persistenceUnitName" value="persistenceUnitCloudbees" />
		<property name="jpaProperties">
			<map>
				<entry key="hibernate.connection.characterEncoding" value="UTF-8" />
				<entry key="hibernate.connection.charSet" value="UTF-8" />
			</map>
		</property>
	</bean>

	<bean id="transactionManagerCloudbees" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactoryCloudbees" />
	</bean>

	<!-- TASKS -->
	<bean id="scheduler" name="scheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
		scope="singleton" lazy-init="false">
		<property name="autoStartup" value="true" />
		<property name="overwriteExistingJobs" value="true" />
		<property name="triggers">
			<list>
				<bean class="org.springframework.scheduling.quartz.SimpleTriggerBean">
					<property name="jobDetail" ref="primeReplicationJobDetail" />
					<property name="repeatInterval" value="1892160000000" />
					<property name="repeatCount" value="0" />
					<property name="startDelay" value="5000" />
				</bean>
				<bean class="org.springframework.scheduling.quartz.CronTriggerBean">
					<property name="cronExpression" value="${countryReplicationCronExpression}" />
					<property name="jobDetail" ref="countryReplicationJobDetail" />
				</bean>
				<bean class="org.springframework.scheduling.quartz.CronTriggerBean">
					<property name="cronExpression" value="${stateReplicationCronExpression}" />
					<property name="jobDetail" ref="stateReplicationJobDetail" />
				</bean>
				<bean class="org.springframework.scheduling.quartz.CronTriggerBean">
					<property name="cronExpression" value="${cityReplicationCronExpression}" />
					<property name="jobDetail" ref="cityReplicationJobDetail" />
				</bean>
				<bean class="org.springframework.scheduling.quartz.CronTriggerBean">
					<property name="cronExpression" value="${currencyReplicationCronExpression}" />
					<property name="jobDetail" ref="currencyReplicationTaskDetail" />
				</bean>
			</list>
		</property>
	</bean>

	<bean id="primeReplicationJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetBeanName" value="primeFinder" />
		<property name="targetMethod" value="find" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="countryReplicationJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetBeanName" value="countryReplicator" />
		<property name="targetMethod" value="replicate" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="stateReplicationJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetBeanName" value="stateReplicator" />
		<property name="targetMethod" value="replicate" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="cityReplicationJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetBeanName" value="cityReplicator" />
		<property name="targetMethod" value="replicate" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="currencyReplicationTaskDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetBeanName" value="currencyReplicator" />
		<property name="targetMethod" value="replicate" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="geoPlanetApi" class="com.jgeoplanet.GeoPlanet">
		<constructor-arg index="0" value="${geoPlanetApiKey}" />
	</bean>

	<!-- MySQL DAOS -->
	<bean id="guestDao" class="com.home.dao.implementations.SimpleJpaDao">
		<constructor-arg index="0">
			<value>
				com.home.model.cloud.jpa.Guest
			</value>
		</constructor-arg>
	</bean>

	<bean id="countryDao" class="com.home.dao.implementations.SimpleJpaDao">
		<constructor-arg index="0">
			<value>
				com.home.model.cloud.jpa.Country
			</value>
		</constructor-arg>
	</bean>

	<bean id="stateDao" class="com.home.dao.implementations.SimpleJpaDao">
		<constructor-arg index="0">
			<value>
				com.home.model.cloud.jpa.State
			</value>
		</constructor-arg>
	</bean>

	<bean id="cityDao" class="com.home.dao.implementations.SimpleJpaDao">
		<constructor-arg index="0">
			<value>
				com.home.model.cloud.jpa.City
			</value>
		</constructor-arg>
	</bean>

	<bean id="currencyDao" class="com.home.dao.implementations.SimpleJpaDao">
		<constructor-arg index="0">
			<value>
				com.home.model.cloud.jpa.Currency
			</value>
		</constructor-arg>
	</bean>

	<bean id="currencyValueDao" class="com.home.dao.implementations.SimpleJpaDao">
		<constructor-arg index="0">
			<value>
				com.home.model.cloud.jpa.CurrencyValue
			</value>
		</constructor-arg>
	</bean>

	<bean id="latestRatesDao" class="com.home.dao.implementations.SimpleJpaDao">
		<constructor-arg index="0">
			<value>
				com.home.model.cloud.jpa.LatestRates
			</value>
		</constructor-arg>
	</bean>

	<bean id="primeDao" class="com.home.dao.implementations.SimpleJpaDao">
		<constructor-arg index="0">
			<value>
				com.home.model.cloud.jpa.Prime
			</value>
		</constructor-arg>
	</bean>

	<!-- MongoDB DAOS -->
	<bean id="countryMongoDao" class="com.home.dao.implementations.SimpleMongoDao">
		<constructor-arg index="0">
			<value>
				com.home.model.cloud.mongo.MongoCountry
			</value>
		</constructor-arg>
	</bean>

	<bean id="stateMongoDao" class="com.home.dao.implementations.SimpleMongoDao">
		<constructor-arg index="0">
			<value>
				com.home.model.cloud.mongo.MongoState
			</value>
		</constructor-arg>
	</bean>

	<bean id="cityMongoDao" class="com.home.dao.implementations.SimpleMongoDao">
		<constructor-arg index="0">
			<value>
				com.home.model.cloud.mongo.MongoCity
			</value>
		</constructor-arg>
	</bean>

	<bean id="currencyMongoDao" class="com.home.dao.implementations.SimpleMongoDao">
		<constructor-arg index="0">
			<value>
				com.home.model.cloud.mongo.MongoCurrency
			</value>
		</constructor-arg>
	</bean>

	<bean id="primeMongoDao" class="com.home.dao.implementations.SimpleMongoDao">
		<constructor-arg index="0">
			<value>
				com.home.model.cloud.mongo.MongoPrime
			</value>
		</constructor-arg>
	</bean>

</beans>